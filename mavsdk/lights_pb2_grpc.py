# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import lights_pb2 as lights_dot_lights__pb2


class LightsServiceStub(object):
    """*
    Control vehicle lights.

    Each light is addressed by a pair of numbers - the strip ID and the light ID.
    Or euivalently we can consider each light as being part of a 2D matrix of lights.
    The API assumes each light is a WRGB LED, with 8-bit depth per compoent.
    Each LED then has 4 bytes of data.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetMatrix = channel.unary_unary(
                '/mavsdk.rpc.lights.LightsService/SetMatrix',
                request_serializer=lights_dot_lights__pb2.SetMatrixRequest.SerializeToString,
                response_deserializer=lights_dot_lights__pb2.SetMatrixResponse.FromString,
                )
        self.SetStrip = channel.unary_unary(
                '/mavsdk.rpc.lights.LightsService/SetStrip',
                request_serializer=lights_dot_lights__pb2.SetStripRequest.SerializeToString,
                response_deserializer=lights_dot_lights__pb2.SetStripResponse.FromString,
                )
        self.FollowFlightMode = channel.unary_unary(
                '/mavsdk.rpc.lights.LightsService/FollowFlightMode',
                request_serializer=lights_dot_lights__pb2.FollowFlightModeRequest.SerializeToString,
                response_deserializer=lights_dot_lights__pb2.FollowFlightModeResponse.FromString,
                )


class LightsServiceServicer(object):
    """*
    Control vehicle lights.

    Each light is addressed by a pair of numbers - the strip ID and the light ID.
    Or euivalently we can consider each light as being part of a 2D matrix of lights.
    The API assumes each light is a WRGB LED, with 8-bit depth per compoent.
    Each LED then has 4 bytes of data.

    """

    def SetMatrix(self, request, context):
        """
        Set all lights to the given colors. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStrip(self, request, context):
        """
        Set the lights on a given strip to the given colors. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FollowFlightMode(self, request, context):
        """
        Set whether the lights should follow the flight mode. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LightsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMatrix,
                    request_deserializer=lights_dot_lights__pb2.SetMatrixRequest.FromString,
                    response_serializer=lights_dot_lights__pb2.SetMatrixResponse.SerializeToString,
            ),
            'SetStrip': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStrip,
                    request_deserializer=lights_dot_lights__pb2.SetStripRequest.FromString,
                    response_serializer=lights_dot_lights__pb2.SetStripResponse.SerializeToString,
            ),
            'FollowFlightMode': grpc.unary_unary_rpc_method_handler(
                    servicer.FollowFlightMode,
                    request_deserializer=lights_dot_lights__pb2.FollowFlightModeRequest.FromString,
                    response_serializer=lights_dot_lights__pb2.FollowFlightModeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.lights.LightsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LightsService(object):
    """*
    Control vehicle lights.

    Each light is addressed by a pair of numbers - the strip ID and the light ID.
    Or euivalently we can consider each light as being part of a 2D matrix of lights.
    The API assumes each light is a WRGB LED, with 8-bit depth per compoent.
    Each LED then has 4 bytes of data.

    """

    @staticmethod
    def SetMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.lights.LightsService/SetMatrix',
            lights_dot_lights__pb2.SetMatrixRequest.SerializeToString,
            lights_dot_lights__pb2.SetMatrixResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetStrip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.lights.LightsService/SetStrip',
            lights_dot_lights__pb2.SetStripRequest.SerializeToString,
            lights_dot_lights__pb2.SetStripResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FollowFlightMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.lights.LightsService/FollowFlightMode',
            lights_dot_lights__pb2.FollowFlightModeRequest.SerializeToString,
            lights_dot_lights__pb2.FollowFlightModeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
